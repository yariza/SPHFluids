#pragma kernel SPHInitialize

#include "SPHMortonCode.cginc"

#define MAX_PARTICLES 1 << 20
#define THREAD_X 512

cbuffer Constants : register(b0)
{
	float _gridSize;
	uint _numParticles;
}

StructuredBuffer<float4> _positionBuffer;

// uint2 buffer of interleaved id and zIndex.
// sorted by zIndex later on.
RWByteAddressBuffer _idZIndexBuffer;
// RWStructuredBuffer<uint> _idBuffer;
// RWStructuredBuffer<int> _zIndexBuffer;
StructuredBuffer<float4> _minBuffer;

int getZIndex(float3 position)
{
	uint3 coord = asuint((int3)floor((position - _minBuffer[0].xyz) / _gridSize));
	coord = coord & ~(1 << 31);
	// return coord.x;
	return asint(mortonCode(coord));
}

[numthreads(THREAD_X, 1, 1)]
void SPHInitialize (
	uint3 id : SV_DispatchThreadID,
	uint3 tid : SV_GroupThreadID)
{
	uint idx = id.x;
	if (idx >= _numParticles) return;

	uint zIndex;
	// if (idx < _numParticles)
	// {
	// 	float3 position = _positionBuffer[idx].xyz;
	// 	zIndex = getZIndex(position);
	// }
	// else
	// {
	// 	zIndex = 0xFFFFFFFF;
	// }
	
	// _idBuffer[idx] = idx;
	// _zIndexBuffer[idx] = zIndex;
	float3 position = _positionBuffer[idx].xyz;
	zIndex = getZIndex(position);
	_idZIndexBuffer.Store2(idx*8, uint2(idx, zIndex));
}
